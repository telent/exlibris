Try and keep the privacy model simple ...

Your books are grouped into collections.  You can add friends to each
collection, which allows them to browse/search the books therein.

For each collection: browse permission is for 
self/friends/friends of friends/world

People who are not your friends post 'requests to borrow': everyone
with the book being searched for (perhaps within a particular
grographical area) is notified when someone asks to borrow it and can
reply or not as they see fit

Reviews are always public, but writers can opt not to have their names
displayed against them.

Borrowing is arranged by conversation between lender and borrower.  If
lender has offered to lend a book, site will check with him a bit later
that the book has been lent, so that it can update book whereabouts

The view which allows adding a book is, in application model terms,
creating a Book and creating or finding an Edition and/or Publication.

Wed Oct 19 13:05:45 2011

Some thoughts about user authentication

- probably not that many people will want to maek their entire book
  collection open to the public

- but without a decent amont of books to browse, the average new user
  will not see a compelling case for joining up

- so make the service invite-only: any user may invite his friend and
  at the same time give them browse rights on his collections.  We can
  make it very easy to do this as part of lending them a book

- an email link with a cookie in it is a valid login method for the user
  it is sent to: i.e. lending a book to someone who is not registered 
  will create a User and a :link authorization for them

- there needs to be a user merge operation in case people invite you
  and you're in already, o you have multiple email addresses, etc etc

Avenues to think about right now

1) 'events' model so that people can see what's happening with their 
friends (borrow requests, new books, etc)

2) api for lending a book

book.lend_to(User.find(my_friend_id))

3) new user invitations

User.invite_by_email(email_address)
=> generates a user and a :link authorization 
=> emails the address given 

invitation links can also be shared by twitter DM or other channels


Thu Oct 20 11:57:27 2011

Again with user permissions: adding an extensive set of roles is only
going to lead to extensive trouble, so can we keep it to as few as
possible?

admin - can do everything

moderator - "trusted lieutenants" can't amend personal details but can
fix book descriptions and reviews

Thu Oct 20 13:00:33 2011

New user creation should add a default collection
New collection creation should allow acl to be copied from another collection
Need an interface for editing an acl


Sun Oct 23 15:26:00 2011

Empirical testing says that adding books is really pretty easy.  It
needs some more prominent error alert when a book is not found,
though, and it doesn't scan the barcodes that borders stick to the
backs of books

It is too easy to add books to the wrong collection.  We need some
kind of 'organize' facility which would allow mass
reassignment/processing of many books at once
- change collection
- change shelf
- sort by accession date/etc as well as by author

Suggest we make this accessible from the 'books' collection resource.
Default is to show all books in collections we can see (paginated,
obviously), but we can add filters that combine

owner_id=17&add_date=20111027&author=adams&shelf_id=2&collection_id=6

each row has a check box against it.  There is a menu bar that
gives options for what to do with selected rows, a la gmail

- change collection
- change shelf
- delete

We need a 'search'

We need a warning when a duplicate book is added in case the same one
has been scanned twice, and a field on the book to distinguish one
copy from the next if there really is more than one

Lending: needs implementing

Reviews: needs implementing

New User experience could be several billion times slicker

News: some kind of channel to view changes in your network 
- any changes to collections that you have viewing rights for
- people you may know who have recently joined
- loans from collections you can see
- loans to people whose collections you can see

if there is an opt-out per item for posting to the news channel, that
makes the finer points of privacy easier to deal with, if you are
lending/borrowing an embarrassing book

Thu Oct 27 14:58:47 2011

Let's think about lending

1) a request to lend is just a message of some kind: it doesn't change
book state in any way

2) book#lend(borrower) changes borrower_id

3) book#return deletes it again

4) it should be possible from lend events and book-added events to
work out when people are reading books and prompt them to perform
reviews

Mon Oct 31 15:39:13 2011

'lend' button should pop up a list of potential lendees then when one
of them is selected POST to /book/n/lend/ with param borrower_id=u

Tue Nov  1 17:50:14 2011

List of lendees should have an autocompleting text input so that
people with loadsafriends don't have to search the lot

There should be some way to combine a lend with an invite to the system

If users A and B both invite C independently by different channels
(e.g. email vs twitter), there should be some way for C to dedupe.
Perhaps it would be easier for invites to be email-only, and send C to
a link where he can add his choice of authorization token to the
account thus created

We need some fake users in the system so that we can dic around with lending.

Wed Nov  2 16:31:34 2011

Permissions and friends and shit:

If there were only public collections, a user would still need some
way to indicate who else's changes he's interested in.  Thus we need a
concept of 'following', and a user can be notified when someone is
following him so he can follow back or grant special permissions

Profiles are always public.  Address info is whatever you want to put
in there (lat/lng, postcode, locality, or random bollocks) 

Default permissions, I think, are that profile is visible to all and
primary collection is visible to all

Thu Nov  3 11:43:00 2011

OK, here's take n+1 on the permissions stuff

1) profiles are public and can be seen by the whole internet.  maybe
someday we'll do protected profiles but not today

2) collections are/may be restricted: 
* internet
* registered users
* named users

don't know if there's a slick way to do this with joins.  perhaps by
convention 'the internet' has uid -1 and 'registered user' has zero.
perhaps this is premature optimization

3) 'follow' relatioships exist as filters for the news/events feeds,
but do not govern browsing visibility.  Following is asymmetric.  The
user being followed is notified and may reciprocate and/or open private
collections to the follower if he likes

4) 

This leads us into fresh consideration of the events feed.  Events are

* 'new book'
* 'new review'
* 'now reading'
* 'request to borrow'
* 'lend' (from another perspective, 'borrow')
* 'return'

There must be an option at event creation to make that event private.
Options: internet, registered users, "my friends of friends", "my
friends", the people it names. 



The event viewer may want to consolidate events into stories e.g. if a
user adds 500 books when they first register, that's one story not
500.  Stories may be tailored per-user - e.g. a 'lend' event will br
presented differently depending whether you know the borrower or
lender or both.

We could also add a freeform 'wall post' story.  Named users in the
story text will also have the post flagged for them

Stories _about_ a user may be tweeted/facebooked on that user's wall.
Stories _concerning_ a user might (if they're important) be emailed to that user



Thu Nov  3 11:55:46 2011

TODO: 

1) permissions model as above
2) events/stories
3) reviews
4) invites
5) "moderator" and "librarian" interfaces, for cleaning up reviews and
 tidying edition data resp.
6) a new user should get a default collection
7) UI for collection ACLs
8) search books
9) browsing interface for other people's books - by author or tag or something
10) 'request to borrow' and/or 'wishlist' 
11) home page

Home page for an established user will probably be mostly news feed.
For a new user we want various tools to get him started

* "complete your profile"
* "add books"
* "find people to follow"

Thu Nov  3 18:11:30 2011

Permissions: 

a) the #check_rights before_filter, or something like it, is good.  It
should be implemented as an includable module, though, not copypasted.
Or maybe we could even add it to ApplicationController

 before_filter :check_rights, :except=>:sessions

or
class SessionController
    skip_before_filter :check_rights

In theory there should be a better way to tell if we're a member route or a
collection route than by testing for params[:id], but I can't find it

b) for processing collections in which each item may have different
perms, do we need a standard way of saying "give me only the ones that
A User can see"?  Ideally we would wish to push this down into the db
in some way

Collection.find(n).books.permitted(current_user,:show)

scope permitted, lambda(user,action) {
  where("exists(select user_id from collections_acl where collection_id=#{table_name}.id)",user.id)
}

def permitted?(user,action)
  !! self.class.permitted(user,action).find(self.id)
end

in very few places do we have an interesting route that views an
entire collection itself: usually we're following a has_many
association from some other object.  e.g. shelves/2/show calling
Shelf.find(2).books



Fri Nov  4 11:55:29 2011

Invites: if collections default to public view anyway, do we need
invites as much?  It's easy to mail someone a link to your collection
that they can view: then they can sign up if they want to

Fri Nov  4 12:16:01 2011

It feels a bit wrong to have methods on the model that are expected to
know whether *controller* actions are allowed.  It might be better to
tie permissions to model actions

:edit
:show
:create
:delete

or maybe we're over-engineering again.

we could do with a scope on each class though that confines 

Fri Nov  4 16:24:08 2011

All we really need is 

check_authorized do
  @book=Book.find(params[:id])
  @book.some_attribute==true
end

or something

Sat Nov  5 17:03:48 2011

checks for shelf/collection of a book should be moved into book validation

maybe current_user should barf if not logged in.

are we still using editions/isbn action for anything?
	

Sat Nov  5 17:27:22 2011

what can we say about creating events and collating them into stories?
Book#create, Review#create, Book#lend, Book#return

Subject: John
Verb: lent
Object: Wyrd Sisters
       (to)
Indirect Object: Peter

John
added-to-his-library
Dune

John
reclaimed
Wyrd Sisters
(from)
Peter 

John
added-to-reading-list
Dune

John
removed-from-reading-list
Dune

Spike
joined-logovore

All messages have verb and subject
Some messages have (direct) object
Some messages have indirect object

where the subject/verb/indirect object are the same, chronologically adjacent
events (separated by say < 30 minutes) can be coalesced into one story

owner
action
book
recipient
timestamp
ca

when aggregating stories, it would be good if previously-viewed
stories didn't change from underneath us.  e.g. if 48 books were added
between 14:30 and 14:50 and another 20 between 15:02 and 15:20,
whether this is reported as one story or two depends on whether we
looked at our news feed between those two times.  We need  a marker
to denote when the feed was viewed -  this could even be an event itself

John
looked-at-the-news




